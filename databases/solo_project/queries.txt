RELEASE 2
Run a SQL query for each of the following:

1.Display the information in one table (either table is fine).
sqlite> SELECT * FROM cars;
OUTPUT=
1|Cadillac|2016|true|1
2|BMW|2010|false|2
3|Mercedes-Benz|2014|true|3

2.Update an item that meets some condition (you can choose a condition that makes sense).
sqlite> UPDATE rabbits SET age=4 WHERE name="Queen Bey";
OUTPUT=
2|BMW|2010|true|2

3.Display the information in both tables using one query.
sqlite> SELECT * FROM cars, colors WHERE cars.color_id = colors.id;
OUTUPUT=
1|Cadillac|2016|true|1|1|blue
2|BMW|2010|true|2|2|green
3|Mercedes-Benz|2014|true|3|3|white

4.Display a narrower selection of columns (fewer columns than all of them, in other words) from both tables using one query.
sqlite> SELECT cars.name, colors.name FROM cars JOIN colors ON cars.color_id = colors.id;
OUTPUT=
Cadillac|blue
BMW|green
Mercedes-Benz|white

5.Delete an item that meets some condition (you can choose a condition that makes sense)
sqlite> DELETE FROM cars
   ...> WHERE year<2016;
OUTPUT=
1|Cadillac|2016|true|1

RELEASE 3
1.There are lots of different kinds of joins. What are they? Can you apply different conditions to a join to change what's displayed? Can you bookmark any good diagrams that will help you tell different joins apart in the future?
Try a few different joins in your database, and record the commands and the output in queries.txt.

sqlite> SELECT cars.name, colors.name
   ...> FROM cars as cars
   ...> LEFT JOIN colors as colors
   ...> on cars.name = colors.name
   ...> ;
OUTPUT=
Cadillac|

sqlite> SELECT cars.color_id, colors.name
   ...> FROM cars as cars
   ...> RIGHT JOIN colors as colors
   ...> on cars.color_id = colors.name;
OUTPUT=
Error: RIGHT and FULL OUTER JOINs are not currently supported




